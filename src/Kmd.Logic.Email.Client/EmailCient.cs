using Kmd.Logic.Email.Client.Models;
using Kmd.Logic.Email.Client.ServicesMessages;
using Kmd.Logic.Email.Client.Types;
using Kmd.Logic.Identity.Authorization;
using Microsoft.Rest;
using System;
using System.Net.Http;
using System.Threading.Tasks;

namespace Kmd.Logic.Email.Client
{
    /// <summary>
    /// Class to use the autogenerated client class to call APIs.
    /// </summary>
    public sealed class EmailCient : IDisposable
    {
        private readonly HttpClient httpClient;
        private readonly EmailOptions options;
        private readonly ITokenProviderFactory tokenProviderFactory;
        private InternalClient internalClient;
        private string bearerToken;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCient"/> class.
        /// </summary>
        /// <param name="httpClient">The HTTP client to use. The caller is expected to manage this resource and it will not be disposed.</param>
        /// <param name="tokenProviderFactory">The Logic access token provider factory.</param>
        /// <param name="options">The required configuration options.</param>
        public EmailCient(
            HttpClient httpClient,
            ITokenProviderFactory tokenProviderFactory,
            EmailOptions options)
        {
            this.httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
            this.options = options ?? throw new ArgumentNullException(nameof(options));
            this.tokenProviderFactory = tokenProviderFactory ?? throw new ArgumentNullException(nameof(tokenProviderFactory));
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCient"/> class using bearer token.
        /// </summary>
        /// <param name="httpClient">The HTTP client to use. The caller is expected to manage this resource and it will not be disposed.</param>
        /// <param name="options">The required configuration options.</param>
        /// <param name="bearerToken">Required access token to authenticate with File Security module.</param>
        public EmailCient(
           HttpClient httpClient,
           string bearerToken,
           EmailOptions options)
        {
            this.httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
            this.options = options ?? throw new ArgumentNullException(nameof(options));
            this.bearerToken = bearerToken ?? throw new ArgumentNullException(nameof(bearerToken));
        }

        /// <summary>
        /// Creates MSExchange Configuration.
        /// </summary>
        /// <param name="mSExchangeConfigurationRequestDetails">Configuration details to be created.</param>
        /// <returns>CreateCertificateResponse.</returns>
        public async Task<MSExchangeConfigurationResponse> CreateMSExchangeConfiguration(MSExchangeConfigurationRequestDetails mSExchangeConfigurationRequestDetails)
        {
            var client = this.CreateClient();
            var request = new MSExchangeConfigurationCreateRequest(
                mSExchangeConfigurationRequestDetails.ConfigurationName,
                mSExchangeConfigurationRequestDetails.FromAddress);
            using var certificateDetailsResponse = await client.CreateEmailConfigurationWithHttpMessagesAsync(
                 this.options.SubscriptionId,
                 request).ConfigureAwait(false);
            switch (certificateDetailsResponse?.Response?.StatusCode)
            {
                case System.Net.HttpStatusCode.OK:
                    return certificateDetailsResponse.Body;

                case System.Net.HttpStatusCode.NotFound:
                    return null;

                default:
                    throw new EmailException(certificateDetailsResponse?.Body?.ToString() ?? "Error accessing Email service.");
            }
        }

        /// <summary>
        /// Disposing the rest of the classes.
        /// </summary>
        public void Dispose()
        {
            this.httpClient?.Dispose();
            this.tokenProviderFactory?.Dispose();
            this.internalClient?.Dispose();
        }

        /// <summary>
        /// Create internal client.
        /// </summary>
        /// <returns>InternalClient.</returns>
        internal InternalClient CreateClient()
        {
            if (this.internalClient != null)
            {
                return this.internalClient;
            }

            TokenCredentials credentials;
            if (!string.IsNullOrEmpty(this.bearerToken))
            {
                credentials = new TokenCredentials(this.bearerToken);
                this.internalClient = new InternalClient(credentials)
                {
                    BaseUri = this.options.EmailServiceUri,
                };
            }
            else
            {
                var tokenProvider = this.tokenProviderFactory.GetProvider(this.httpClient);
                this.internalClient = new InternalClient(new TokenCredentials(tokenProvider))
                {
                    BaseUri = this.options.EmailServiceUri,
                };
            }

            return this.internalClient;
        }
    }
}
