// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Email.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SendEmailRequest
    {
        /// <summary>
        /// Initializes a new instance of the SendEmailRequest class.
        /// </summary>
        public SendEmailRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SendEmailRequest class.
        /// </summary>
        /// <param name="providerConfigurationId">A unique identifier that
        /// represents the associated configuration
        /// which this Email message will be sent with.</param>
        /// <param name="importance">Possible values include: 'low', 'normal',
        /// 'high'</param>
        /// <param name="subject">Email Subject</param>
        /// <param name="recipients">Recipients email addresses</param>
        /// <param name="body">A unique identifier that represents the
        /// associated configuration
        /// which this Email message will be sent with.</param>
        /// <param name="attachment">Attachments sent as part of email</param>
        /// <param name="schedule">Schedule email to send later</param>
        /// <param name="template">HTML template sent as email</param>
        /// <param name="callbackUrl">If provided, this URL endpoint will
        /// receive a POST request when there is any
        /// change of the Email status (e.g. sending, sent and failed).</param>
        public SendEmailRequest(System.Guid providerConfigurationId, string importance, string subject, RecipientEmail recipients, string body = default(string), IList<Attachment> attachment = default(IList<Attachment>), Schedule schedule = default(Schedule), TemplateDetails template = default(TemplateDetails), string callbackUrl = default(string))
        {
            ProviderConfigurationId = providerConfigurationId;
            Importance = importance;
            Body = body;
            Subject = subject;
            Recipients = recipients;
            Attachment = attachment;
            Schedule = schedule;
            Template = template;
            CallbackUrl = callbackUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a unique identifier that represents the associated
        /// configuration
        /// which this Email message will be sent with.
        /// </summary>
        [JsonProperty(PropertyName = "providerConfigurationId")]
        public System.Guid ProviderConfigurationId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'low', 'normal', 'high'
        /// </summary>
        [JsonProperty(PropertyName = "importance")]
        public string Importance { get; set; }

        /// <summary>
        /// Gets or sets a unique identifier that represents the associated
        /// configuration
        /// which this Email message will be sent with.
        /// </summary>
        [JsonProperty(PropertyName = "body")]
        public string Body { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recipients")]
        public RecipientEmail Recipients { get; set; }

        /// <summary>
        /// Gets or sets attachments sent as part of email
        /// </summary>
        [JsonProperty(PropertyName = "attachment")]
        public IList<Attachment> Attachment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public Schedule Schedule { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "template")]
        public TemplateDetails Template { get; set; }

        /// <summary>
        /// Gets or sets if provided, this URL endpoint will receive a POST
        /// request when there is any
        /// change of the Email status (e.g. sending, sent and failed).
        /// </summary>
        [JsonProperty(PropertyName = "callbackUrl")]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Importance == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Importance");
            }
            if (Subject == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Subject");
            }
            if (Recipients == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Recipients");
            }
            if (Schedule != null)
            {
                Schedule.Validate();
            }
        }
    }
}
