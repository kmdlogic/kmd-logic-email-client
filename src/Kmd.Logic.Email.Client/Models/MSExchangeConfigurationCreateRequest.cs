// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Email.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class MSExchangeConfigurationCreateRequest
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MSExchangeConfigurationCreateRequest class.
        /// </summary>
        public MSExchangeConfigurationCreateRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MSExchangeConfigurationCreateRequest class.
        /// </summary>
        /// <param name="fromAddress">Domain/Subdomain used to configure the
        /// sender.</param>
        /// <param name="configurationName">A custom name that can be used to
        /// later understand the purpose of
        /// this provider configuration.</param>
        public MSExchangeConfigurationCreateRequest(string fromAddress, string configurationName = default(string))
        {
            ConfigurationName = configurationName;
            FromAddress = fromAddress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a custom name that can be used to later understand the
        /// purpose of
        /// this provider configuration.
        /// </summary>
        [JsonProperty(PropertyName = "configurationName")]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// Gets or sets domain/Subdomain used to configure the sender.
        /// </summary>
        [JsonProperty(PropertyName = "fromAddress")]
        public string FromAddress { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FromAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FromAddress");
            }
            if (FromAddress != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(FromAddress, "^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "FromAddress", "^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$");
                }
            }
        }
    }
}
