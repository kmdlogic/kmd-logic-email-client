// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Email.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InternalClient.
    /// </summary>
    internal static partial class InternalClientExtensions
    {
            /// <summary>
            /// Creates/Uploads an attachment file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the Provider Configuration.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='attachment'>
            /// </param>
            public static AttachmentResponse SaveAttachment(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, Stream attachment = default(Stream))
            {
                return operations.SaveAttachmentAsync(subscriptionId, providerConfigurationId, attachment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates/Uploads an attachment file.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the Provider Configuration.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='attachment'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AttachmentResponse> SaveAttachmentAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, Stream attachment = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveAttachmentWithHttpMessagesAsync(subscriptionId, providerConfigurationId, attachment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a single Email.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Consumer subscription Id
            /// </param>
            /// <param name='request'>
            /// </param>
            public static object SendEmail(this IInternalClient operations, System.Guid subscriptionId, SendEmailRequest request)
            {
                return operations.SendEmailAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a single Email.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Consumer subscription Id
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendEmailAsync(this IInternalClient operations, System.Guid subscriptionId, SendEmailRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendEmailWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an MSExchange email configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the configurations.
            /// </param>
            /// <param name='request'>
            /// The details of the email configuration
            /// </param>
            public static MSExchangeConfigurationResponse CreateEmailConfiguration(this IInternalClient operations, System.Guid subscriptionId, MSExchangeConfigurationCreateRequest request = default(MSExchangeConfigurationCreateRequest))
            {
                return operations.CreateEmailConfigurationAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an MSExchange email configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the configurations.
            /// </param>
            /// <param name='request'>
            /// The details of the email configuration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSExchangeConfigurationResponse> CreateEmailConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, MSExchangeConfigurationCreateRequest request = default(MSExchangeConfigurationCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEmailConfigurationWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an MSExchange email configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the configurations.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            public static MSExchangeConfigurationResponse GetEmailConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId)
            {
                return operations.GetEmailConfigurationAsync(subscriptionId, providerConfigurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an MSExchange email configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the configurations.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSExchangeConfigurationResponse> GetEmailConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmailConfigurationWithHttpMessagesAsync(subscriptionId, providerConfigurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an MSExchange email configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            public static MSExchangeConfigurationResponse UpdateEmailConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, MSExchangeConfigurationUpdateRequest request = default(MSExchangeConfigurationUpdateRequest))
            {
                return operations.UpdateEmailConfigurationAsync(subscriptionId, providerConfigurationId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an MSExchange email configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSExchangeConfigurationResponse> UpdateEmailConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, MSExchangeConfigurationUpdateRequest request = default(MSExchangeConfigurationUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateEmailConfigurationWithHttpMessagesAsync(subscriptionId, providerConfigurationId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all available provider configurations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription ID
            /// </param>
            public static IList<EmailProviderConfiguration> GetAllProviderConfigurations(this IInternalClient operations, System.Guid subscriptionId)
            {
                return operations.GetAllProviderConfigurationsAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all available provider configurations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EmailProviderConfiguration>> GetAllProviderConfigurationsAsync(this IInternalClient operations, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllProviderConfigurationsWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Provider Configurations for a specific ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            public static void DeleteProviderConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId)
            {
                operations.DeleteProviderConfigurationAsync(subscriptionId, providerConfigurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Provider Configurations for a specific ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProviderConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProviderConfigurationWithHttpMessagesAsync(subscriptionId, providerConfigurationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all template ids for the specific provider configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the template.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            public static IList<TemplateInformation> GetTemplate(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId)
            {
                return operations.GetTemplateAsync(subscriptionId, providerConfigurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all template ids for the specific provider configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the template.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TemplateInformation>> GetTemplateAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTemplateWithHttpMessagesAsync(subscriptionId, providerConfigurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates/Uploads a template for a specific provider configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the template.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='template'>
            /// </param>
            public static TemplateResponse SaveTemplate(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, Stream template)
            {
                return operations.SaveTemplateAsync(subscriptionId, providerConfigurationId, template).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates/Uploads a template for a specific provider configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the template.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='template'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TemplateResponse> SaveTemplateAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, Stream template, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveTemplateWithHttpMessagesAsync(subscriptionId, providerConfigurationId, template, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the template id for the specific provider configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the template.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='templateId'>
            /// The Template ID
            /// </param>
            public static void DeleteTemplate(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, System.Guid templateId)
            {
                operations.DeleteTemplateAsync(subscriptionId, providerConfigurationId, templateId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the template id for the specific provider configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription that owns the template.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='templateId'>
            /// The Template ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTemplateAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, System.Guid templateId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTemplateWithHttpMessagesAsync(subscriptionId, providerConfigurationId, templateId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
