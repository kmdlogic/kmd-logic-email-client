// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Email.Client
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    internal partial interface IInternalClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Creates/Uploads an attachment file.
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription that owns the Provider Configuration.
        /// </param>
        /// <param name='providerConfigurationId'>
        /// The Provider Configuration ID
        /// </param>
        /// <param name='attachment'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AttachmentResponse>> SaveAttachmentWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid providerConfigurationId, Stream attachment = default(Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a single Email.
        /// </summary>
        /// <param name='subscriptionId'>
        /// Consumer subscription Id
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SendEmailWithHttpMessagesAsync(System.Guid subscriptionId, SendEmailRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates an MSExchange email configuration.
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription that owns the configurations.
        /// </param>
        /// <param name='request'>
        /// The details of the email configuration
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MSExchangeConfigurationResponse>> CreateEmailConfigurationWithHttpMessagesAsync(System.Guid subscriptionId, MSExchangeConfigurationCreateRequest request = default(MSExchangeConfigurationCreateRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get an MSExchange email configuration.
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription that owns the configurations.
        /// </param>
        /// <param name='providerConfigurationId'>
        /// The Provider Configuration ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MSExchangeConfigurationResponse>> GetEmailConfigurationWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid providerConfigurationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an MSExchange email configuration.
        /// </summary>
        /// <param name='subscriptionId'>
        /// A valid SubscriptionId in which you are an owner/contributor
        /// </param>
        /// <param name='providerConfigurationId'>
        /// A valid ProviderConfigurationId of the config which needs to be
        /// updated
        /// </param>
        /// <param name='request'>
        /// The request body
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MSExchangeConfigurationResponse>> UpdateEmailConfigurationWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid providerConfigurationId, MSExchangeConfigurationUpdateRequest request = default(MSExchangeConfigurationUpdateRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists all available provider configurations for the subscription.
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<EmailProviderConfiguration>>> GetAllProviderConfigurationsWithHttpMessagesAsync(System.Guid subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Provider Configurations for a specific
        /// ProviderConfigurationId.
        /// </summary>
        /// <param name='subscriptionId'>
        /// The Subscription ID
        /// </param>
        /// <param name='providerConfigurationId'>
        /// The Provider Configuration ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteProviderConfigurationWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid providerConfigurationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all template ids for the specific provider configuration.
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription that owns the template.
        /// </param>
        /// <param name='providerConfigurationId'>
        /// The Provider Configuration ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TemplateInformation>>> GetTemplateWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid providerConfigurationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates/Uploads a template for a specific provider configuration.
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription that owns the template.
        /// </param>
        /// <param name='providerConfigurationId'>
        /// The Provider Configuration ID
        /// </param>
        /// <param name='template'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TemplateResponse>> SaveTemplateWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid providerConfigurationId, Stream template, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete the template id for the specific provider configuration.
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription that owns the template.
        /// </param>
        /// <param name='providerConfigurationId'>
        /// The Provider Configuration ID
        /// </param>
        /// <param name='templateId'>
        /// The Template ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTemplateWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid providerConfigurationId, System.Guid templateId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
